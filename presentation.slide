HTTP Servers in Go

Derrick Laird
Nozzle
@mordfustang50

* Agenda

Go over building and testing http web services and show a few nice 
design patterns

- What is HTTP
- Basic HTTP server
- More advanced routing
- Testing
- REST

* What is HTTP
Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes.

Here is an example of an HTTP message
.image images/http-message-format.png


* A basic HTTP Server
Here is an example of a basic http server that does nothing.
.code http-basic.go /START OMIT/,/END OMIT/

* Lets add some basic routing

    type HandlerFunc func(ResponseWriter, *Request)
    func HandleFunc(pattern string, handler http.HandleFunc)
    
Here we register a handler function by passing a path an anonymous function to call
when a request is made to the path.
    
.play http-basic-with-handler.go /START OMIT/,/END OMIT/

This works by registering an handler on the default ServeMux in the http package.

.code http-basic-with-handler.go /SERV_START OMIT/,/SERV_END OMIT/

Notice there is no method defined here. By default the handler will be called
for all methods at this path. How do we fix that?

* Implementing method matching
Here we implement some method matching for our handler.
.code http-handler-method-match.go /START OMIT/,/END OMIT/
Here we limit the handler to only write back a response on a GET request and return
an error on all other methods.

If we want to avoid this type of boiler plate code we will have to switch to a
custom router.

* Custom Routers
In our previous examples we've always passed a nil handler to the ListenAndServe call which uses the default ServeMux.
We can change that with anything that implements this interface.

        type Handler interface {
        	ServeHTTP(ResponseWriter, *Request)
        }
        
All incoming requests will now go through this single ServeHTTP function making it now
up to the implementation to determine how routing works.

It is also up to them to determine how route registration is handled.

* Implementing Chi
Here is an example of implementing *github.com/go-chi/chi* which is a light weight
performant router used by companies like Cloudflare, Heroku and Nozzle.
.code http-custom-router.go /START OMIT/,/END OMIT/

Now we have various route registration methods like

    Get, Put, Post, Delete
    
As well opening up features like middleware and more advanced route features.

* Middleware
Middleware is a function that has access to the request and response as well as a control flow callback.
.code chi-middleware.go /START OMIT/,/END OMIT/    
Here is an example middleware that forces all requests to be authenticated.

*  Route Specific Auth

    func AuthHandler(handler http.HandlerFunc) http.HandlerFunc {
    	return func(writer http.ResponseWriter, request *http.Request) {
    		// pull the authorization header and verify a value has been given
    		authValue := request.Header.Get("Authorization")
    		if authValue == "" {
    			http.Error(writer, "authorization required", http.StatusUnauthorized)
    			return
    		}
    		
    		handler(writer, request)
    	}
    }
    
    http.HandleFunc("/admin", AuthHandler(func(writer http.ResponseWriter, request *http.Request) {
    		// only gets run if authenticated	
    }))
    
* Advanced Routes
An example of route parameters.

.code chi-route-parameters.go /START OMIT/,/END OMIT/

Here we pull the book name from the route and return it.

Say we wanted to return more data about the book in JSON format how would we do that?

* Working with JSON
Here we write back a JSON response containing a book title and author.
.code chi-basic-json.go /START OMIT/,/END OMIT/

* Testing an HTTP service
- httptest.Server
- httptest.ResponseRecorder

* ResponseRecorder Method
.code http_test.go /RECORDER OMIT/,/RECORDER OMIT/

* TestServer Method
.code http_test.go /SERVER OMIT/,/SERVER OMIT/ 

* REST What is it?
REST is an architectural style, or design pattern, for APIs.

Introduced by Roy Fielding in 2000 in his dissertation Architectural Styles and the Designs of Network Based Architectures

A key component is the concept or resources and resource methods.

    POST /books - create book
    GET /books - list books
    GET /books/{id} - get book
    PUT /books/{id{ - update book
    DELETE /books/{id} - delete book
    PATCH /books/{id} - partially update a book

* Richardson Maturity Model

* What is it?

A way of determining how RESTful your webservice is.

There are 4 levels 0-3

- 0 - The swamp of POX (plain old XML)
- 1 - Resource based address/URI
- 2 - Utilize potential of HTTP
- 3 - User hypermedia or HATEOAS

* 0 - The Swamp Of POX
APIs at this level are not at all RESTful and this is where SOAP based services take place.

    http://<hostname>:port/twitter

.image images/0-pox.jpg

* 1 - Resource based Address/URI
This is where we break the single URL into multiple paths

    ~/twitter
    
Becomes

    ~/tweets
    ~/tweets/{tweetID}/comments
    ~/tweets/{tweetID}/followers
    
* 2 - Utilize HTTP as Application Layer Protocol
This is where we start utilizing standard HTTP methods/verbs and different status codes to do different operations.

Example

    DELETE ~/tweets/{tweetID} -> 204 No Content
    DELETE ~/tweets/{tweetID}/comments/{commentID} -> 204 No Content
    POST ~/tweets -> 201 Created
    
* 3 - Use Hypermedia or HATEOAS
Here we start providing additional details in the responses like the URI to get further information
on a resource or how to perform an operation on it

.image images/3-hateoas.png

* Github API Example
Here is a ~/search/commits example

          "committer": {
            "login": "octocat",
            "id": 583231,
            "node_id": "MDQ6VXNlcjU4MzIzMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },

* Sentry.io Bad Example
.link https://docs.sentry.io/api/projects/get-project-details/

    GET /api/0/projects/{organization_slug}/{project_slug}/ - Retrieve project
    PUT /api/0/projects/{organization_slug}/{project_slug}/ - Update project
    DELETE /api/0/projects/{organization_slug}/{project_slug}/ - Delete project
    
Create Project

    POST /api/0/projects/{organization_slug}/ - Create project?
    
Nope 

    405 Method Not Allowed

It's under a team

    POST /api/0/teams/{organization_slug}/{team_slug}/projects/


* Resources to further explore
Richardson Maturity Model
.link https://developers.redhat.com/blog/2017/09/13/know-how-restful-your-api-is-an-overview-of-the-richardson-maturity-model/
REST in detail
.link https://www.codecademy.com/articles/what-is-rest
